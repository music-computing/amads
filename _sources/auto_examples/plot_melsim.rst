
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_melsim.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_melsim.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_melsim.py:


Melodic similarity
==================

This example demonstrates how we can calculate the similarity between two
melodies using the `melsim` module, which is a Python wrapper for the `melsim`
R package (https://github.com/sebsilas/melsim).

.. GENERATED FROM PYTHON SOURCE LINES 11-12

First, we'll import the required modules.

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: Python


    from amads.core.basics import Score
    from amads.melody.similarity.melsim import (
        check_r_packages_installed,
        get_similarities,
        get_similarity,
    )








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Check if all required dependencies are installed.

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: Python



    def test_check_dependencies():
        """Check if R packages are installed."""
        try:
            check_r_packages_installed(install_missing=True)
            print("All R packages are installed.")
        except ImportError:
            print(
                "Some R packages are missing. Please run install_dependencies() from the melsim module."
            )


    test_check_dependencies()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Installing CRAN package 'tibble'...
    Installing CRAN package 'R6'...
    Installing CRAN package 'remotes'...
    Installing CRAN package 'dplyr'...
    Installing CRAN package 'magrittr'...
    Installing CRAN package 'proxy'...
    Installing CRAN package 'purrr'...
    Installing CRAN package 'purrrlyr'...
    Installing CRAN package 'tidyr'...
    Installing CRAN package 'yaml'...
    Installing CRAN package 'stringr'...
    Installing CRAN package 'emdist'...
    Installing CRAN package 'dtw'...
    Installing CRAN package 'ggplot2'...
    Installing CRAN package 'cba'...
    Installing CRAN package 'jsonlite'...
    Installing GitHub package 'melsim'...
    All R packages are installed.




.. GENERATED FROM PYTHON SOURCE LINES 38-40

Create example melodies for comparison. We'll start with a C major scale and
create variations by altering different notes.

.. GENERATED FROM PYTHON SOURCE LINES 40-66

.. code-block:: Python


    # Create a C major scale melody (C4 to C5) with quarter note durations
    c_major_scale = Score.from_melody(
        pitches=[60, 62, 64, 65, 67, 69, 71, 72], durations=1.0
    )

    # Create variations by altering different notes
    modified_scale = Score.from_melody(
        pitches=[60, 62, 64, 66, 67, 69, 71, 72], durations=1.0  # F4->F#4
    )

    third_scale = Score.from_melody(
        pitches=[60, 62, 64, 66, 67, 68, 71, 72], durations=1.0  # F4->F#4, A4->Ab4
    )

    fourth_scale = Score.from_melody(
        pitches=[60, 62, 64, 66, 67, 68, 70, 72], durations=1.0  # F4->F#4, A4->Ab4, B4->Bb4
    )

    melodies = {
        "c_major_scale": c_major_scale,
        "modified_scale": modified_scale,
        "third_scale": third_scale,
        "fourth_scale": fourth_scale,
    }








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Perform a simple similarity comparison between two melodies using Jaccard similarity.

.. GENERATED FROM PYTHON SOURCE LINES 68-72

.. code-block:: Python


    similarity = get_similarity(c_major_scale, modified_scale, "Jaccard", "pitch")
    print(f"Jaccard similarity between c_major_scale and modified_scale: {similarity}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Jaccard similarity between c_major_scale and modified_scale: 0.7778




.. GENERATED FROM PYTHON SOURCE LINES 73-74

Now perform pairwise comparisons across all melodies using different similarity measures.

.. GENERATED FROM PYTHON SOURCE LINES 74-101

.. code-block:: Python


    similarity_measures = ["cosine", "Simpson"]

    for method in similarity_measures:
        # Use batch processing for efficiency
        batch_results = get_similarities(melodies, method=method, transformation="pitch")

        # batch_results is now a single matrix (since single method/transformation)
        print(f"\nPairwise {method} similarities:")

        # Display the similarity matrix
        melody_names = list(melodies.keys())

        # Print header
        print(f"{'':20}", end="")
        for name in melody_names:
            print(f"{name:15}", end="")
        print()

        # Print matrix rows
        for name1 in melody_names:
            print(f"{name1:20}", end="")
            for name2 in melody_names:
                similarity = batch_results[name1][name2]
                print(f"{similarity:15.4f}", end="")
            print()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Extracting melody data...
    Processing Score objects:   0%|          | 0/4 [00:00<?, ?it/s]    Processing Score objects: 100%|██████████| 4/4 [00:00<00:00, 5272.54it/s]
    Computing similarities...
    Processing batches:   0%|          | 0/1 [00:00<?, ?it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.13it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.13it/s]

    Pairwise cosine similarities:
                        c_major_scale  modified_scale third_scale    fourth_scale   
    c_major_scale                1.0000         1.0000         1.0000         1.0000
    modified_scale               1.0000         1.0000         1.0000         1.0000
    third_scale                  1.0000         1.0000         1.0000         1.0000
    fourth_scale                 1.0000         1.0000         1.0000         1.0000
    Extracting melody data...
    Processing Score objects:   0%|          | 0/4 [00:00<?, ?it/s]    Processing Score objects: 100%|██████████| 4/4 [00:00<00:00, 6043.67it/s]
    Computing similarities...
    Processing batches:   0%|          | 0/1 [00:00<?, ?it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.13it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.13it/s]

    Pairwise Simpson similarities:
                        c_major_scale  modified_scale third_scale    fourth_scale   
    c_major_scale                1.0000         0.8750         0.7500         0.6250
    modified_scale               0.8750         1.0000         0.8750         0.7500
    third_scale                  0.7500         0.8750         1.0000         0.8750
    fourth_scale                 0.6250         0.7500         0.8750         1.0000




.. GENERATED FROM PYTHON SOURCE LINES 102-103

Finally, explore other types of melodic similarity measures.

.. GENERATED FROM PYTHON SOURCE LINES 103-108

.. code-block:: Python


    # Compare intervallic similarity
    intervallic_sim = get_similarity(c_major_scale, modified_scale, "Euclidean", "int")
    print(f"\nEuclidean intervallic similarity: {intervallic_sim}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Euclidean intervallic similarity: 0.4142




.. GENERATED FROM PYTHON SOURCE LINES 109-110

Compare IOI class similarity (expected to be 1 as IOIs are identical)

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python

    ioi_sim = get_similarity(c_major_scale, modified_scale, "Canberra", "ioi_class")
    print(f"Canberra IOI class similarity: {ioi_sim}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Canberra IOI class similarity: 1.0




.. GENERATED FROM PYTHON SOURCE LINES 114-115

Compare using different transformations

.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python

    transformations = ["pitch", "int", "parsons", "pc"]
    print("\nSimilarity across different transformations:")
    for transformation in transformations:
        sim = get_similarity(c_major_scale, modified_scale, "Jaccard", transformation)
        print(f"Jaccard {transformation} similarity: {sim:.4f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Similarity across different transformations:
    Jaccard pitch similarity: 0.7778
    Jaccard int similarity: 1.0000
    Jaccard parsons similarity: 1.0000
    Jaccard pc similarity: 0.7500




.. GENERATED FROM PYTHON SOURCE LINES 122-123

Comprehensive comparison using multiple methods and transformations

.. GENERATED FROM PYTHON SOURCE LINES 123-136

.. code-block:: Python

    print("\nComprehensive comparison (multiple methods and transformations):")
    comprehensive_results = get_similarities(
        {"melody1": c_major_scale, "melody2": modified_scale},
        method=["Jaccard", "Dice", "cosine", "Euclidean"],
        transformation=["pitch", "int", "parsons", "pc"],
    )

    # Display results in a formatted table
    print(f"{'Method':12} {'Transform':15} {'Similarity':>12}")
    print("-" * 40)
    for (method, transformation), matrix in comprehensive_results.items():
        similarity = matrix["melody1"]["melody2"]
        print(f"{method:12} {transformation:15} {similarity:12.4f}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Comprehensive comparison (multiple methods and transformations):
    Extracting melody data...
    Processing Score objects:   0%|          | 0/2 [00:00<?, ?it/s]    Processing Score objects: 100%|██████████| 2/2 [00:00<00:00, 5282.50it/s]
    Computing similarities...
    Processing batches:   0%|          | 0/1 [00:00<?, ?it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.12it/s]    Processing batches: 100%|██████████| 1/1 [00:00<00:00,  1.12it/s]
    Method       Transform         Similarity
    ----------------------------------------
    Jaccard      pitch                 0.7778
    Jaccard      int                   1.0000
    Jaccard      parsons               1.0000
    Jaccard      pc                    0.7500
    Dice         pitch                 0.8750
    Dice         int                   1.0000
    Dice         parsons               1.0000
    Dice         pc                    0.8571
    cosine       pitch                 1.0000
    cosine       int                   0.9545
    cosine       parsons               1.0000
    cosine       pc                    0.9985
    Euclidean    pitch                 0.5000
    Euclidean    int                   0.4142
    Euclidean    parsons               1.0000
    Euclidean    pc                    0.5000





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 43.038 seconds)


.. _sphx_glr_download_auto_examples_plot_melsim.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_melsim.ipynb <plot_melsim.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_melsim.py <plot_melsim.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_melsim.zip <plot_melsim.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
